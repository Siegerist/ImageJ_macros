//This is the IJ1 macro code for the scoMorphoFISH preprint: https://www.biorxiv.org/content/10.1101/2021.09.27.461916v1
//Define source directories 													//before you can start: 
   print("Select directory of the stacks");											//install plugins: DeepImageJ, CSBDeep, StarDist, ResultstoExcel, RS-FISH
   dir = getDirectory("Select a Source Directory");										//install U-Net for Glom segmentation in DeepImageJ
   close("Log");														//fill in the correct directory for trained StarDist in ll. 368, 446, 527
//location and name of saved excel table											// the trained StarDist network can be found on Zenodo: 10.5281/zenodo.5543722
   print("Select the file name");
   filename = getDirectory("Select the file name");
   name2 = File.getNameWithoutExtension(filename);
   outputDir= dir+name2+".xlsx";
   close("Log");


//slide stained with podocin?
boolean = getBoolean("Are glomeruli immunostained?", "Yes", "No");

//labeled podocytes
boolean3 = getBoolean("Labeled podocytes?", "Yes", "No");

//freehand segmentation
if(boolean == 0){
boolean2 = getBoolean("Do you want to select the glomerular ROI's freehand?", "Yes", "No");



if(boolean2 == 1){
//Batch processing freehand segmentation
   setBatchMode(false);
   count = 0;
   countFiles2(dir);
   n = 0;
   processFiles2(dir);

   function countFiles2(dir) {
      list2 = getFileList(dir);
      for (i=0; i<list2.length; i++) {
          if (endsWith(list2[i], "/"))
              countFiles2(""+dir+list2[i]);
          else{
              count++;
          }
      }
  }

   function processFiles2(dir) {
      list2 = getFileList(dir);
      for (i=0; i<list2.length; i++) {
          if (endsWith(list2[i], "/"))
              processFiles2(""+dir+list2[i]);
          else {
             showProgress(n++, count);
             path2 = dir+list2[i];
             processFile2(path2);
          }
      }
  }


//Open only tiffs
nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}

  function processFile2(path2) {
       if (endsWith(path2, ".tif")) {
           open(path2);

           //Segment Glom freehand
		waitForUser("Select glom outlines", "Select the glomerular outlines with the freehand selection tool");		
		//Create Glom ROI and measure Glom area
		name4=getInfo("image.title");
		Stack.setChannel(4);
		roiManager("add");
		roiManager("Select",0);
		roiManager("save", dir+name4+".zip");
		close(name4);

nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
   }
  }
 }
 }


//start of image analysis
print("Starting image analysis");

//Batch processing
   setBatchMode(false);
   count = 0;
   countFiles(dir);
   n = 0;
   processFiles(dir);

   function countFiles(dir) {
      list = getFileList(dir);
      for (i=0; i<list.length; i++) {
          if (endsWith(list[i], "/"))
              countFiles(""+dir+list[i]);
          else{
              count++;
          }
      }
  }

   function processFiles(dir) {
      list = getFileList(dir);
      for (i=0; i<list.length; i++) {
          if (endsWith(list[i], "/"))
              processFiles(""+dir+list[i]);
          else {
             showProgress(n++, count);
             path = dir+list[i];
             processFile(path);
          }
      }
  }
  
//Open only tiffs
  function processFile(path) {
       if (endsWith(path, ".tif")) {
           open(path);


//name for dataset label
name3 = File.getNameWithoutExtension(path); 

//General image preparation
	//Empty ROI manager
	name=getInfo("image.title");
	run("Select None");
	run("Set Measurements...", "area display redirect=None decimal=3");
	Source=getDirectory("image");
	Title=getTitle;
	Slice=getInfo("slice.label");

//Make MIP if a stack is imported
if (nSlices>4) {
run("Z Project...", "projection=[Max Intensity]");
}

nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
	//Set scale
run("Set Scale...", "distance=5.2826 known=1 unit=micron global");

//Detect C3 transcripts using rsFISH
	selectImage(name);
	run("Duplicate...", "duplicate channels=3");
	rename("C3_source");
	run("Z Project...", "projection=[Max Intensity]");
	run("RS-FISH", "image=MAX_C3_source mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC use_anisotropy add image_min=0 image_max=255 sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=40 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[]");
	//Add C3 localizations from ROIS
	newImage("C3_binary", "8-bit black", 2048, 2048, 1);
	roiManager("Show All");
	roiManager("Draw");

	close("Results");
	close("smFISH localizations");
//Detect C2 transcripts using rsFISH
nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
	selectImage(name);
	run("Duplicate...", "duplicate channels=2");
	rename("C2_source");
	run("Z Project...", "projection=[Max Intensity]");
	
	run("RS-FISH", "image=MAX_C2_source mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC use_anisotropy add image_min=0 image_max=255 sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=40 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[]");
	//Add C3 localizations from ROIS
	newImage("C2_binary", "8-bit black", 2048, 2048, 1);
	roiManager("Show All");
	roiManager("Draw");
// deleted localizations 
	close("Results");
	close("smFISH localizations");
	
	nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
//C4 Nuclei Image
selectWindow(name);
run("Select None");
run("Duplicate...", "duplicate channels=4");
run("Z Project...", "projection=[Max Intensity]");
rename("C4");

//Quantify glomerular transcripts: Compare glom vs. non glom transcripts
selectWindow(name);	

if(boolean == 0) {
//Open glom mask
File.setDefaultDir(dir);
roiManager("Open", dir+name+".zip");
	//Combines ROIs if >1 ROI
	nROIs = roiManager("count");
	if (nROIs > 1) {
	roiManager("Combine");
	}
}
else {
//trained U-net for Glom segmentation
selectImage(name);
run("Duplicate...", "duplicate channels=1");			//choose channel where glomrulus is stained
run("Z Project...", "projection=[Max Intensity]");
run("8-bit");
run("DeepImageJ Run", "model=Glom_seg_podocin_DL_4_66 format=Tensorflow preprocessing=[per_sample_scale_range.ijm] postprocessing=[8bitBinarize.ijm] axes=Y,X,C tile=512,512,1 logging=normal");
run("Invert");
run("Analyze Particles...", "size=5000-Infinity show=Outlines include add in_situ");
roiManager("Select",0);
roiManager("save", dir+name+".zip");
}

//Open glom mask
File.setDefaultDir(dir);
roiManager("Open", dir+name+".zip");
	//Combines ROIs if >1 ROI
	nROIs = roiManager("count");
	if (nROIs > 1) {
	roiManager("Combine");
	}

		//Create Glom ROI and measure Glom area
		Stack.setChannel(4);
		roiManager("Select",0);
		run("Copy");
		newImage("Glom_DAPI", "8-bit black", 2048, 2048, 1);
		
		run("Paste");
		
		//Copy WT1 Channel for podo counts later
		selectWindow(name);	
		
		roiManager("Select",0);
		Stack.setChannel(1);
		run("Copy");
        newImage("Glom_WT1", "8-bit black", 2048, 2048, 1);
		roiManager("Select",0);
		run("Paste");
		
		
		//Measure areas inside and outside the glom
		selectImage("C3_binary");
		roiManager("Select", 0);
		run("Measure");
		run("Make Inverse");
		run("Measure");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[Glom_Area"+name3+"]");
		close("Results"); 
	
	 		//Particle Analysis: Counting C3 dots inside Glom ROI 
	 		selectImage("C3_binary");
	 		roiManager("Select", 0);
			run("Analyze Particles...", "size=0-Infinity summarize");
			Table.rename("Summary", "Results");	
			run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[C3_transcripts_in_glom"+name3+"]");
			IJ.renameResults("Results","C3_transcripts_in_glom");
	
		//Count C2 transcripts inside Glom ROI
		selectImage("C2_binary");
		roiManager("Select", 0);
		run("Analyze Particles...", "size=0-Infinity summarize");
		Table.rename("Summary", "Results");	
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[C2_transcripts_in_glom"+name3+"]");
		IJ.renameResults("Results","C2_transcripts_in_glom");

//ratio C3/C2_transcripts_in_glom
		print("\\Clear");
Table.rename("C2_transcripts_in_glom", "Results");
x = getResult("Count");
close("Results");

Table.rename("C3_transcripts_in_glom", "Results");
y = getResult("Count");
close("Results");

ratio = y/x;

print(ratio);
logString = getInfo("log");

z = newArray(logString);

Table.create("Results");
Table.setColumn("ratio", z);
run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[ratio_C3/C2_transcripts_in_glom"+name3+"]");
close("Results");
	
//Count transcripts outside Glom ROI C3
		selectWindow("C3_binary");
		roiManager("Select", 0);
		run("Make Inverse");
		run("Analyze Particles...", "size=0-Infinity summarize");	
		Table.rename("Summary", "Results");	
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[C2+C3_transcripts_outside_glom] dataset_label=[C3_transcripts_outside_glom"+name3+"]");
		IJ.renameResults("Results","C3_transcripts_outside_glom");

		
 
	//Count transcripts outside Glom ROI C2
	selectWindow("C2_binary");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Analyze Particles...", "size=0-Infinity summarize");
	Table.rename("Summary", "Results");	
	run("Read and Write Excel", "file=["+outputDir+"] sheet=[C2+C3_transcripts_outside_glom] dataset_label=[C2_transcripts_outside_glom"+name3+"]");
	IJ.renameResults("Results","C2_transcripts_outside_glom");

//ratio C3/C2_transcripts_outside_glom
		print("\\Clear");
Table.rename("C2_transcripts_outside_glom", "Results");
x = getResult("Count");
close("Results");

Table.rename("C3_transcripts_outside_glom", "Results");
y = getResult("Count");
close("Results");

ratio = y/x;

print(ratio);
logString = getInfo("log");

z = newArray(logString);

Table.create("Results");
Table.setColumn("ratio", z);
run("Read and Write Excel", "file=["+outputDir+"] sheet=[C2+C3_transcripts_outside_glom] dataset_label=[ratio_C3/C2_transcripts_outside_glom"+name3+"]");
close("Results");

	//New image with glomerular nuclei
	selectWindow("C4");
	roiManager("Select", 0);
	run("Copy");
	newImage("C4_inside_glom", "8-bit black", 2048, 2048, 1);
	roiManager("Select", 0);
	run("Paste");
	

	//New image with extraglomerular nuclei
	selectWindow("C4");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Copy");
	newImage("C4_outside_glom", "8-bit black", 2048, 2048, 1);
	roiManager("Select", 0);
	run("Make Inverse");
	run("Paste");

	
	//Clears ROI manager for nuclear segmentation
	roiManager("delete");
	run("Select None");

//Segment all Cells
selectWindow("C4");
run("Select None");
run("Gaussian Blur...", "sigma=2");
//StarDist 20210125_3

run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'C4', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'C:\\\\Users\\\\juanb\\\\OneDrive\\\\Dokumente\\\\Medizin\\\\Medizinstudium\\\\Doktorarbeit\\\\Fiji\\\\Macros\\\\Model_DAPI\\\\ROI\\\\Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois3 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 25){
areaRois3 = append(areaRois3,i);
}}
if(areaRois3.length > 0){
roiManager("select",areaRois3);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}
//Select thresholded and binarized C3 
selectWindow("C3_binary");

//Particle Analysis: Counting transcripts inside all cells 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C3_transcripts_per_cell");
	Table.rename("C3_transcripts_per_cell", "Results");
	C3_per_cell = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell] dataset_label=[C3_transcripts_per_cell"+name3+"]");
	close("Results");
	//creates an extra sheet for calculating ratio
	Table.create("Results");
	Table.setColumn("C3_transcripts_per_cell", C3_per_cell );
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_ratio] dataset_label=[C3_transcripts_per_cell"+name3+"]");
	close("Results");
	
//Select thresholded and binarized C2
selectWindow("C2_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C2_transcripts_per_cell");
	Table.rename("C2_transcripts_per_cell", "Results");
	C2_per_cell = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell] dataset_label=[C2_transcripts_per_cell"+name3+"]");
    close("Results");
    //creates an extra sheet for calculating ratio
    Table.create("Results");
	Table.setColumn("C2_transcripts_per_cell", C2_per_cell );
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_ratio] dataset_label=[C2_transcripts_per_cell"+name3+"]");
	close("Results");

//Segment all glomerular cells
selectWindow("C4_inside_glom");
run("Select None");
run("Gaussian Blur...", "sigma=2");

//StarDist 20210125_3
run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'C4_inside_glom', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'C:\\\\Users\\\\juanb\\\\OneDrive\\\\Dokumente\\\\Medizin\\\\Medizinstudium\\\\Doktorarbeit\\\\Fiji\\\\Macros\\\\Model_DAPI\\\\ROI\\\\Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois2 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 25){
areaRois2 = append(areaRois2,i);
}}
if(areaRois2.length > 0){
roiManager("select",areaRois2);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}
//Select thresholded and binarized C3 
selectWindow("C3_binary");

//Particle Analysis: Counting transcripts inside all cells 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C3_transcripts_per_cell_in_glom");
	Table.rename("C3_transcripts_per_cell_in_glom", "Results");
	C3_per_cell_in_glom = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_in_glom] dataset_label=[C3_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");
	//creates an extra sheet for calculating ratio
	Table.create("Results");
	Table.setColumn("C3_transcripts_per_cell_in_glom", C3_per_cell_in_glom);
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_cell_in_glom_ratio] dataset_label=[C3_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");

//Select thresholded and binarized C2
selectWindow("C2_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C2_transcripts_per_cell_in_glom");
	Table.rename("C2_transcripts_per_cell_in_glom", "Results");
	C2_per_cell_in_glom = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_in_glom] dataset_label=[C2_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");
	//creates an extra sheet for calculating ratio
	Table.create("Results");
	Table.setColumn("C2_transcripts_per_cell_in_glom", C2_per_cell_in_glom);
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_cell_in_glom_ratio] dataset_label=[C2_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");
	

//Segment all extraglomerular cells
selectWindow("C4_outside_glom");
run("Select None");
run("Gaussian Blur...", "sigma=2");

//StarDist 20210125_3

run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'C4_outside_glom', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'C:\\\\Users\\\\juanb\\\\OneDrive\\\\Dokumente\\\\Medizin\\\\Medizinstudium\\\\Doktorarbeit\\\\Fiji\\\\Macros\\\\Model_DAPI\\\\ROI\\\\Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
     
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois1 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 25){
areaRois1 = append(areaRois1,i);
}}
if(areaRois1.length > 0){
roiManager("select",areaRois1);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}
//Select thresholded and binarized C3 
selectWindow("C3_binary");

//Particle Analysis: Counting transcripts inside all cells 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C3_transcripts_per_cell_outside_glom");
	Table.rename("C3_transcripts_per_cell_outside_glom", "Results");
	C3_per_cell_outside_glom = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_outside_glom] dataset_label=[C3_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");
	//creates an extra sheet for calculating ratio
	Table.create("Results");
	Table.setColumn("C3_per_cell_outside_glom", C3_per_cell_outside_glom);
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_cell_outside_glom_ratio] dataset_label=[C3_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");
	
//Select thresholded and binarized C2
selectWindow("C2_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize in_situ");
			
	}
	IJ.renameResults("C2_transcripts_per_cell_outside_glom");
	Table.rename("C2_transcripts_per_cell_outside_glom", "Results");
	C2_per_cell_outside_glom = Table.getColumn("Count");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_transcripts_per_cell_outside_glom] dataset_label=[C2_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");
	//creates an extra sheet for calculating ratio
	Table.create("Results");
	Table.setColumn("C2_transcripts_per_cell_outside_glom", C2_per_cell_outside_glom);
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_cell_outside_glom_ratio] dataset_label=[C2_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");

//Segment all podos
	//Empty ROI manager
	nROIs = roiManager("count");
	if (nROIs > 0) {
	roiManager("delete");
	}
	
	//StarDist Segmentation
	selectImage("Glom_WT1");
	run("Set Scale...", "distance=5.2826 known=1 unit=micron global");
	run("Gaussian Blur...", "sigma=2");
	
	//StarDist 20210125_3
run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'Glom_WT1', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'C:\\\\Users\\\\juanb\\\\OneDrive\\\\Dokumente\\\\Medizin\\\\Medizinstudium\\\\Doktorarbeit\\\\Fiji\\\\Macros\\\\Model_DAPI\\\\ROI\\\\Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less WT1 intensity than 130
roiCount =roiManager("count");
backgroundRois = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
mean = getValue("Mean");
if(mean <= 80){
backgroundRois = append(backgroundRois,i);
}}
if(backgroundRois.length > 0){
roiManager("select",backgroundRois);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2; }
     
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 15){
areaRois = append(areaRois,i);
}}
if(areaRois.length > 0){
roiManager("select",areaRois);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

if(boolean3 == 1){
//Skip Podo transcript counter if no Podo was segmented
nPodos = roiManager("count");
if (nPodos == 0){
	print("No podos detected - Podo transcript analysis skipped_"+name);
}
		else {
			print(nPodos+"_Podos segmented_"+name);
			//Save Podo ROIs
			roiManager("save", Source + Title+"_Podos.zip");
			
			//Podo counting in glom
			newImage("Podo_binary", "8-bit black", 2048, 2048, 1);
			roiManager("Show All");
			roiManager("Fill");
			roiManager("delete");
			run("Set Measurements...", "feret's redirect=None decimal=3");
			run("Analyze Particles...", "size=15-80 display exclude add summarize in_situ");

			roiCount2 =roiManager("count");
			if (roiCount2 > 0){

			IJ.renameResults("nPodos");
			Table.rename("nPodos", "Results");
			run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[nPodos"+name3+"]");
			Table.rename("Results", "nPodos");
		
		//Dilate Cell ROIs
		n = roiManager("count");
		for (i = 0; i < n; i++) {
		    roiManager("select", i);
		    run("Enlarge...", "enlarge=1.5");
		    roiManager("update")
		    roiManager("select", i);
		}
		
		//Analysis of C3 Podo transcripts 
		selectImage("C3_binary");
		
		//Particle Analysis: Counting dots inside each roi 
			numberOfNuclei = roiManager("count");
			for(i=0; i<numberOfNuclei; i++){
				roiManager("Select", i);
					run("Set Measurements...", "area display redirect=None decimal=3");
					run("Analyze Particles...", "size=0-Infinity include summarize in_situ");
					
			}
		Table.rename("Summary", "Results");
		C3_per_podo = Table.getColumn("Count");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[C3_transcripts_per_podo"+name3+"]");
		Table.rename("Results", "C3_transcripts_per_podo");
		//creates an extra sheet for calculating ratio
		Table.create("Results");
		Table.setColumn("C3_transcripts_per_podo", C3_per_podo);
		run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_podo_ratio] dataset_label=[C3_transcripts_per_podo"+name3+"]");
		close("Results");
		
		//Analysis of Podo transcripts in C2
		selectImage("C2_binary");
		
		//Particle Analysis: Counting dots inside each roi 
			numberOfNuclei = roiManager("count");
			for(i=0; i<numberOfNuclei; i++){
				roiManager("Select", i);
					run("Set Measurements...", "area display redirect=None decimal=3");
					run("Analyze Particles...", "size=0-Infinity include summarize in_situ");			
			}
		IJ.renameResults("C2_transcripts_per_podo");
		Table.rename("C2_transcripts_per_podo", "Results");
		C2_per_podo = Table.getColumn("Count");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[C2_transcripts_per_podo"+name3+"]");
		Table.rename("Results", "C2_transcripts_per_podo");
		//creates an extra sheet for calculating ratio
		Table.create("Results");
		Table.setColumn("C2_transcripts_per_podo", C2_per_podo);
		run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[C2+C3_per_podo_ratio] dataset_label=[C2_transcripts_per_podo"+name3+"]");
		close("Results");

			}
			
}
}
		}
  
//close all images and tables
close("Summary");
close("Results");
close("C2_binary");
close("C3_binary");
close("C4");
close("Glom");
close("Glom_WT1");
close("Glom_DAPI");
close("WT1_AND_DAPI");
close("CLSM");
close("Glom_Area"); 
close("C3_transcripts_in_glom");
close("C2_transcripts_in_glom");
close("C3_transcripts_outside_glom");
close("C2_transcripts_outside_glom");
close("C2_transcripts_per_podo");
close("C3_transcripts_per_podo");
close("C2_transcripts_per_cell");
close("C3_transcripts_per_cell");
close("C2_transcripts_in_glom");
close("C3_transcripts_in_glom");
close("C2_transcripts_outside_glom");
close("C3_transcripts_outside_glom");
close("C4_inside_glom");
close("C4_outside_glom");
close("C2_transcripts_per_cell_outside_glom");
close("C3_transcripts_per_cell_outside_glom");
close("C2_transcripts_per_cell_in_glom");
close("C3_transcripts_per_cell_in_glom");
close("Glom_Area");
close("Podo_binary");
close("nPodos");
run("Close All");
  }
  }
  }
