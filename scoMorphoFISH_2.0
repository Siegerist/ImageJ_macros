//This is the IJ1 macro code for the scoMorphoFISH preprint: https://www.biorxiv.org/content/10.1101/2021.09.27.461916v1
//Define source directories 													//before you can start: 
   print("Select directory of the stacks");											//install plugins: DeepImageJ, CSBDeep, StarDist, ResultstoExcel, RS-FISH
   dir = getDirectory("Select a Source Directory");										//install U-Net for Glom segmentation in DeepImageJ
   close("Log");														//fill in the correct directory for trained StarDist in ll. 368, 446, 527
//location and name of saved excel table											// the trained StarDist network can be found on Zenodo: 10.5281/zenodo.5543722
   print("Select the file name");							
   filename = getDirectory("Select the file name");			//last change: 6/13/2022
   name2 = File.getNameWithoutExtension(filename);
   outputDir= dir+name2+".xlsx";
   close("Log");

//Crops to center to discard overlap in WSI data
WSI = getBoolean("Is the input data tiles of whole-slide images?", "Yes", "No");
if (WSI == 1) {
	pct_overlap=getString("Percentage overlap in tiles", "%");

//defining channels
//DAPI channel
DAPI=getString("Which channel contains the nuclear counterstain?", "Ch");
nsmFISH=getBoolean("Whats the total number of smFISH channels?", "2 smFISH channels", "3 smFISH channels");    //2 channels = 1     3 channels = 0
smFISH1=getString("Which channel contains the smFISH Channel 1?", "Ch");
smFISH2=getString("Which channel contains the smFISH Channel 2?", "Ch");
if(nsmFISH == 0){
smFISH3=getString("Which channel contains the smFISH Channel 3?", "Ch");
}
	
//stained glomeruli?
boolean = getBoolean("Are glomeruli immunostained?", "Yes", "No");

//freehand segmentation
boolean2 = getBoolean("Do you want to select the glomerular ROI's freehand?", "Yes", "No");

if(boolean == 1){
glomChannel=getString("Which channel contains the glomerulus IF?", "Ch");	
}

//labeled podocytes
boolean3 = getBoolean("Labeled podocytes?", "Yes", "No");

if(boolean3 == 1){
podoChannel=getString("Which channel contains the podocyte IF?", "Ch");	
}


if(boolean2 == 1){
//Batch processing freehand segmentation
   setBatchMode(false);
   count = 0;
   countFiles2(dir);
   n = 0;
   processFiles2(dir);

   function countFiles2(dir) {
      list2 = getFileList(dir);
      for (i=0; i<list2.length; i++) {
          if (endsWith(list2[i], "/"))
              countFiles2(""+dir+list2[i]);
          else{
              count++;
          }
      }
  }

   function processFiles2(dir) {
      list2 = getFileList(dir);
      for (i=0; i<list2.length; i++) {
          if (endsWith(list2[i], "/"))
              processFiles2(""+dir+list2[i]);
          else {
             showProgress(n++, count);
             path2 = dir+list2[i];
             processFile2(path2);
          }
      }
  }


//Open only tiffs
nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}

  function processFile2(path2) {
       if (endsWith(path2, ".tif")) {
           open(path2);

           //Segment Glom freehand
		waitForUser("Select glom outlines", "Select the glomerular outlines with the freehand selection tool");		
		//Create Glom ROI and measure Glom area
		name4=getInfo("image.title");
		Stack.setChannel(4);
		roiManager("add");
		nROIs = roiManager("count");
	if (nROIs > 1) {
	roiManager("Combine");
	}
roiManager("add");
count = roiManager("count"); 
roiManager("select", count-1);
roiManager("save selected", dir+name4+".zip");
roiManager("deselect");
roiManager("delete");
		
		close(name4);

nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
   
else{
	close("");
}
}
   }
  }
 }



//start of image analysis
print("Starting image analysis");

//Batch processing
   setBatchMode(false);
   count = 0;
   countFiles(dir);
   n = 0;
   processFiles(dir);

   function countFiles(dir) {
      list = getFileList(dir);
      for (i=0; i<list.length; i++) {
          if (endsWith(list[i], "/"))
              countFiles(""+dir+list[i]);
          else{
              count++;
          }
      }
  }

   function processFiles(dir) {
      list = getFileList(dir);
      for (i=0; i<list.length; i++) {
          if (endsWith(list[i], "/"))
              processFiles(""+dir+list[i]);
          else {
             showProgress(n++, count);
             path = dir+list[i];
             processFile(path);
          }
      }
  }
  
//Open only tiffs
  function processFile(path) {
       if (endsWith(path, ".tif")) {
           open(path);


//name for dataset label
name3 = File.getNameWithoutExtension(path); 


//General image preparation
	//Empty ROI manager
	name=getInfo("image.title");
	run("Select None");
	run("Set Measurements...", "area display redirect=None decimal=3");
	Source=getDirectory("image");
	Title=getTitle;
	Slice=getInfo("slice.label");
	
//Crop to center according to tiles overlap in WSI
if (WSI == 1) {
	name5=getTitle();
Stack.getDimensions(width, height, channels, slices, frames);
roi=(width-(2*(width/100)*pct_overlap));
makeRectangle((width/100)*pct_overlap, (height/100)*pct_overlap, roi, roi);
run("Duplicate...", "duplicate");
close(name5);
rename(name5);
}

//defining variables
getDimensions(width, height, channels, slices, frames);
nChannels = (channels);
width = getWidth();
height = getHeight();
//select glomerular or non glomerular images
run("Duplicate...", "duplicate channels=5");
rename("glomdecision");
run("Set Measurements...", "standard integrated stack display redirect=None decimal=3");
run("Measure");
selection = getResult("StdDev", 0);
close("glomdecision");

//Make MIP if a stack is imported
if (nSlices>4) {
run("Z Project...", "projection=[Max Intensity]");
}

nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
	//Set scale
run("Set Scale...", "distance=5.2826 known=1 unit=micron global");

//Detect smFISH1 transcripts using rsFISH
	selectImage(name);
	run("Duplicate...", "duplicate channels="+smFISH1+"");
	rename("smFISH1");
	if (nSlices>1) {
	run("Z Project...", "projection=[Max Intensity]");
	run("RS-FISH", "image=MAX_smFISH1 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=1800 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	else {
	run("RS-FISH", "image=smFISH1 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=1800 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	//Add smFISH1 localizations from ROIS
	newImage("smFISH1_binary", "8-bit black", width, height, 1);
	roiManager("Show All");
	roiManager("Draw");
	run("Invert");

	close("Results");
	close("smFISH localizations");

//Detect smFISH2 transcripts using rsFISH
nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
	selectImage(name);
	run("Duplicate...", "duplicate channels="+smFISH2+"");
	rename("smFISH2");
	if (nSlices>1) {
	run("Z Project...", "projection=[Max Intensity]");
	run("RS-FISH", "image=MAX_smFISH2 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=400 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	else{
	run("RS-FISH", "image=smFISH2 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=400 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	//Add smFISH2 localizations from ROIS
	newImage("smFISH2_binary", "8-bit black", width, height, 1);
	roiManager("Show All");
	roiManager("Draw");
	run("Invert");
// deleted localizations 
	close("Results");
	close("smFISH localizations");

if(nsmFISH == 0){
//Detect smFISH3 transcripts using rsFISH
nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
	selectImage(name);
	run("Duplicate...", "duplicate channels="+smFISH3+"");
	rename("smFISH3");
	if (nSlices>1) {
	run("Z Project...", "projection=[Max Intensity]");
	run("RS-FISH", "image=MAX_smFISH3 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=300 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	else{
	run("RS-FISH", "image=smFISH3 mode=Advanced anisotropy=1.0000 robust_fitting=RANSAC compute_min/max use_anisotropy add sigma=1.50000 threshold=0.00700 support=3 min_inlier_ratio=0.10 max_error=1.50 spot_intensity_threshold=300 background=Mean background_subtraction_max_error=0.05 background_subtraction_min_inlier_ratio=0.10 results_file=[] num_threads=6 block_size_x=128 block_size_y=128 block_size_z=16");
	}
	//Add smFISH3 localizations from ROIS
	newImage("smFISH3_binary", "8-bit black", width, height, 1);
	roiManager("Show All");
	roiManager("Draw");
	run("Invert");
// deleted localizations 
	close("Results");
	close("smFISH localizations");
	
	nROIs = roiManager("count");
if (nROIs > 0) {
roiManager("delete");
}
}
//C1 Nuclei Image
selectWindow(name);
run("Select None");
run("Duplicate...", "duplicate channels="+DAPI+"");
if (nSlices>1) {
	run("Z Project...", "projection=[Max Intensity]");
	}
rename("DAPI");

//Quantify glomerular transcripts: Compare glom vs. non glom transcripts
selectWindow(name);	

if(boolean == 0) {
//Open glom mask
File.setDefaultDir(dir);
roiManager("Open", dir+name+".zip");
	//Combines ROIs if >1 ROI
	nROIs = roiManager("count");
	if (nROIs > 1) {
	roiManager("Combine");
	}
}
else {
if(selection > 25){
//trained U-net for Glom segmentation
selectImage(name);
run("Duplicate...", "duplicate channels=5");
if (nSlices>1) {
	run("Z Project...", "projection=[Max Intensity]");		//choose channel where glomrulus is stained
	}
run("8-bit");
run("DeepImageJ Run", "model=Glom_seg_NPHS2_DL_2 format=Tensorflow preprocessing=[per_sample_scale_range.ijm] postprocessing=[8bitBinarize.ijm] axes=Y,X,C tile=512,512,1 logging=normal");
run("Invert");
run("Analyze Particles...", "size=1000-Infinity show=Outlines include add in_situ");
ngloms = roiManager("count");
if(ngloms > 0){
	if (ngloms > 1) {
	roiManager("Combine");
	roiManager("add");
	}

count = roiManager("count");
if (count > 1) {
roiManager("select", count-1);
roiManager("save selected", dir+name+".zip");
}
else{
	roiManager("select", 0);
	roiManager("save", dir+name+".zip");
}
roiManager("delete");
}
}
}
if(selection > 25 && ngloms > 0){
//Open glom mask
File.setDefaultDir(dir);
roiManager("Open", dir+name+".zip");
	//Combines ROIs if >1 ROI
	nROIs = roiManager("count");
	if (nROIs > 1) {
	roiManager("Combine");
	}

		//Create Glom ROI and measure Glom area
		Stack.setChannel(4);
		roiManager("Select",0);
		run("Copy");
		newImage("Glom_DAPI", "8-bit black", width, height, 1);
		
		run("Paste");
		
		//Copy WT1 Channel for podo counts later
		selectWindow(name);	
		
		roiManager("Select",0);
		Stack.setChannel(1);
		run("Copy");
        newImage("Glom_WT1", "8-bit black", width, height, 1);
		roiManager("Select",0);
		run("Paste");
		
		
		//Measure areas inside and outside the glom
		selectImage("smFISH1_binary");
		roiManager("Select", 0);
		run("Measure");
		run("Make Inverse");
		run("Measure");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[Glom_Area"+name3+"]");
		close("Results"); 

//Particle Analysis:
	 	//Counting smFISH1 dots inside Glom ROI 
	 	selectImage("smFISH1_binary");
	 	roiManager("Select", 0);
		run("Analyze Particles...", "size=0-Infinity summarize");
		Table.rename("Summary", "Results");	
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH1_transcripts_in_glom"+name3+"]");
		IJ.renameResults("Results","smFISH1_transcripts_in_glom");
	
		//Count smFISH2 transcripts inside Glom ROI
		selectImage("smFISH2_binary");
		roiManager("Select", 0);
		run("Analyze Particles...", "size=0-Infinity summarize");
		Table.rename("Summary", "Results");	
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH2_transcripts_in_glom"+name3+"]");
		IJ.renameResults("Results","smFISH2_transcripts_in_glom");

if(nsmFISH == 0){
		//Count smFISH3 transcripts inside Glom ROI
		selectImage("smFISH3_binary");
		roiManager("Select", 0);
		run("Analyze Particles...", "size=0-Infinity summarize");
		Table.rename("Summary", "Results");	
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH3_transcripts_in_glom"+name3+"]");
		IJ.renameResults("Results","smFISH3_transcripts_in_glom");
}

//Count transcripts outside Glom ROI smFISH1
	selectWindow("smFISH1_binary");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Analyze Particles...", "size=0-Infinity summarize");	
	Table.rename("Summary", "Results");	
	run("Read and Write Excel", "file=["+outputDir+"] sheet=[transcripts_outside_glom] dataset_label=[smFISH1_transcripts_outside_glom"+name3+"]");
	IJ.renameResults("Results","smFISH1_transcripts_outside_glom");

//Count transcripts outside Glom ROI smFISH2
	selectWindow("smFISH2_binary");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Analyze Particles...", "size=0-Infinity summarize");
	Table.rename("Summary", "Results");	
	run("Read and Write Excel", "file=["+outputDir+"] sheet=[transcripts_outside_glom] dataset_label=[smFISH2_transcripts_outside_glom"+name3+"]");
	IJ.renameResults("Results","smFISH2_transcripts_outside_glom");

if(nsmFISH == 0){
//Count transcripts outside Glom ROI smFISH3
	selectWindow("smFISH3_binary");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Analyze Particles...", "size=0-Infinity summarize");
	Table.rename("Summary", "Results");	
	run("Read and Write Excel", "file=["+outputDir+"] sheet=[transcripts_outside_glom] dataset_label=[smFISH3_transcripts_outside_glom"+name3+"]");
	IJ.renameResults("Results","smFISH3_transcripts_outside_glom");
}

	//New image with glomerular nuclei
	selectWindow("DAPI");
	roiManager("Select", 0);
	run("Copy");
	newImage("DAPI_inside_glom", "8-bit black", width, height, 1);
	roiManager("Select", 0);
	run("Paste");
	

	//New image with extraglomerular nuclei
	selectWindow("DAPI");
	roiManager("Select", 0);
	run("Make Inverse");
	run("Copy");
	newImage("DAPI_outside_glom", "8-bit black", width, height, 1);
	roiManager("Select", 0);
	run("Make Inverse");
	run("Paste");


	
	//Clears ROI manager for nuclear segmentation
	roiManager("delete");
	run("Select None");

//Segment all Cells
selectWindow("DAPI");
run("Select None");
run("Gaussian Blur...", "sigma=2");
//StarDist 20210125_3

run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'DAPI', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'E:////PROJECTS////LSM_Data////Macros////Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois3 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 5){
areaRois3 = append(areaRois3,i);
}}
if(areaRois3.length > 0){
roiManager("select",areaRois3);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}


//Particle Analysis: 

//Select thresholded and binarized smFISH1 
selectWindow("smFISH1_binary");

	//Counting transcripts inside all cells in smFISH1
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
			roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH1_transcripts_per_cell");
	Table.rename("smFISH1_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH1_transcripts_per_cell"+name3+"]");
	close("Results");

	
//Select thresholded and binarized smFISH2
selectWindow("smFISH2_binary");

	//Counting dots inside each roi in smFISH2
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH2_transcripts_per_cell");
	Table.rename("smFISH2_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH2_transcripts_per_cell"+name3+"]");
    close("Results");
    

if(nsmFISH == 0){
//Select thresholded and binarized smFISH3
selectWindow("smFISH3_binary");

	//Counting dots inside each roi in smFISH3
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH3_transcripts_per_cell");
	Table.rename("smFISH3_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH3_transcripts_per_cell"+name3+"]");
    close("Results");

}

//Segment all glomerular cells
selectWindow("DAPI_inside_glom");
run("Select None");
run("Gaussian Blur...", "sigma=2");

//StarDist 20210125_3
run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'DAPI_inside_glom', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'E:////PROJECTS////LSM_Data////Macros////Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois2 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 5){
areaRois2 = append(areaRois2,i);
}}
if(areaRois2.length > 0){
roiManager("select",areaRois2);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}

//Select thresholded and binarized smFISH1 
selectWindow("smFISH1_binary");

//Particle Analysis: Counting transcripts inside all cells 
	numberOfNuclei2 = roiManager("count");
	for(i=0; i < numberOfNuclei2; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			}
			
	IJ.renameResults("smFISH1_transcripts_per_cell_in_glom");
	Table.rename("smFISH1_transcripts_per_cell_in_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_in_glom] dataset_label=[smFISH1_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");

//Select thresholded and binarized smFISH2
selectWindow("smFISH2_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei2 = roiManager("count");
	for(i=0; i<numberOfNuclei2; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH2_transcripts_per_cell_in_glom");
	Table.rename("smFISH2_transcripts_per_cell_in_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_in_glom] dataset_label=[smFISH2_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");

if(nsmFISH == 0){
//Select thresholded and binarized smFISH3
selectWindow("smFISH3_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei2 = roiManager("count");
	for(i=0; i<numberOfNuclei2; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH3_transcripts_per_cell_in_glom");
	Table.rename("smFISH3_transcripts_per_cell_in_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_in_glom] dataset_label=[smFISH3_transcripts_per_cell_in_glom"+name3+"]");
	close("Results");
}	

//Segment all extraglomerular cells
selectWindow("DAPI_outside_glom");
//run("Select None");
run("Gaussian Blur...", "sigma=2");

//StarDist 20210125_3

run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'DAPI_outside_glom', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'E:////PROJECTS////LSM_Data////Macros////Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
     
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois1 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 5){
areaRois1 = append(areaRois1,i);
}}
if(areaRois1.length > 0){
roiManager("select",areaRois1);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}

//Select thresholded and binarized smFISH1 
selectWindow("smFISH1_binary");

//Particle Analysis: Counting transcripts inside all cells 
	numberOfNuclei3 = roiManager("count");
	for(i=0; i<numberOfNuclei3; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
	}
	
	IJ.renameResults("smFISH1_transcripts_per_cell_outside_glom");
	Table.rename("smFISH1_transcripts_per_cell_outside_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_outside_glom] dataset_label=[smFISH1_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");
	
//Select thresholded and binarized smFISH2
selectWindow("smFISH2_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei3 = roiManager("count");
	for(i=0; i<numberOfNuclei3; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH2_transcripts_per_cell_outside_glom");
	Table.rename("smFISH2_transcripts_per_cell_outside_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_outside_glom] dataset_label=[smFISH2_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");


if(nsmFISH == 0){
//Select thresholded and binarized smFISH3
selectWindow("smFISH3_binary");

//Particle Analysis: Counting dots inside each roi 
	numberOfNuclei3 = roiManager("count");
	for(i=0; i<numberOfNuclei3; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH3_transcripts_per_cell_outside_glom");
	Table.rename("smFISH3_transcripts_per_cell_outside_glom", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell_outside_glom] dataset_label=[smFISH3_transcripts_per_cell_outside_glom"+name3+"]");
	close("Results");

}

//Segment all podos
	//Empty ROI manager
	nROIs = roiManager("count");
	if (nROIs > 0) {
	roiManager("delete");
	}
	
	//StarDist Segmentation
	selectImage("Glom_WT1");
	run("Set Scale...", "distance=5.2826 known=1 unit=micron global");
	run("Gaussian Blur...", "sigma=2");
	
	//StarDist 20210125_3
run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'Glom_WT1', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'E:////PROJECTS////LSM_Data////Macros////Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less WT1 intensity than 130
roiCount =roiManager("count");
backgroundRois = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
mean = getValue("Mean");
if(mean <= 80){
backgroundRois = append(backgroundRois,i);
}}
if(backgroundRois.length > 0){
roiManager("select",backgroundRois);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2; }
     
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 15){
areaRois = append(areaRois,i);
}}
if(areaRois.length > 0){
roiManager("select",areaRois);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

if(boolean3 == 1){
//Skip Podo transcript counter if no Podo was segmented
nPodos = roiManager("count");
if (nPodos == 0){
	print("No podos detected - Podo transcript analysis skipped_"+name);
}
		else {
			print(nPodos+"_Podos segmented_"+name);
			//Save Podo ROIs
			roiManager("save", Source + Title+"_Podos.zip");
			
			//Podo counting in glom
			newImage("Podo_binary", "8-bit black", width, height, 1);
			roiManager("Show All");
			roiManager("Fill");
			roiManager("delete");
			run("Set Measurements...", "feret's redirect=None decimal=3");
			run("Analyze Particles...", "size=15-80 display exclude add summarize");

			roiCount2 =roiManager("count");
			if (roiCount2 > 0){

			IJ.renameResults("nPodos");
			Table.rename("nPodos", "Results");
			run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[nPodos"+name3+"]");
			Table.rename("Results", "nPodos");
		
		//Dilate Cell ROIs
		n = roiManager("count");
		for (i = 0; i < n; i++) {
		    roiManager("select", i);
		    run("Enlarge...", "enlarge=1.5");
		    roiManager("update")
		    roiManager("select", i);
		}
		
		//Analysis of smFISH1 Podo transcripts 
		selectImage("smFISH1_binary");
		
		//Particle Analysis: Counting dots inside each roi 
			numberOfNuclei4 = roiManager("count");
			for(i=0; i<numberOfNuclei4; i++){
				roiManager("Select", i);
					run("Set Measurements...", "area display redirect=None decimal=3");
					run("Analyze Particles...", "size=0-Infinity include summarize in_situ");
					
			}
		Table.rename("Summary", "Results");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH1_transcripts_per_podo"+name3+"]");
		Table.rename("Results", "smFISH1_transcripts_per_podo");
		
		//Analysis of Podo transcripts in smFISH2
		selectImage("smFISH2_binary");
		
		//Particle Analysis: Counting dots inside each roi 
			numberOfNuclei4 = roiManager("count");
			for(i=0; i<numberOfNuclei4; i++){
				roiManager("Select", i);
					run("Set Measurements...", "area display redirect=None decimal=3");
					run("Analyze Particles...", "size=0-Infinity include summarize");			
			}
		IJ.renameResults("smFISH2_transcripts_per_podo");
		Table.rename("smFISH2_transcripts_per_podo", "Results");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH2_transcripts_per_podo"+name3+"]");
		Table.rename("Results", "smFISH2_transcripts_per_podo");

if(nsmFISH == 0){
		//Analysis of Podo transcripts in smFISH3
		selectImage("smFISH3_binary");
		
		//Particle Analysis: Counting dots inside each roi 
			numberOfNuclei4 = roiManager("count");
			for(i=0; i<numberOfNuclei4; i++){
				roiManager("Select", i);
					run("Set Measurements...", "area display redirect=None decimal=3");
					run("Analyze Particles...", "size=0-Infinity include summarize");			
			}
		IJ.renameResults("smFISH3_transcripts_per_podo");
		Table.rename("smFISH3_transcripts_per_podo", "Results");
		run("Read and Write Excel", "file=["+outputDir+"] sheet=[Glom] dataset_label=[smFISH3_transcripts_per_podo"+name3+"]");
		Table.rename("Results", "smFISH3_transcripts_per_podo");
}
			}
			
}
}
		}


if(selection < 25 && ngloms == 0){
	//Clears ROI manager for nuclear segmentation

//Segment all Cells
selectWindow("DAPI");
run("Select None");
run("Gaussian Blur...", "sigma=2");
//StarDist 20210125_3

run("Command From Macro", "command=[de.csbdresden.stardist.StarDist2D], args=['input':'DAPI', 'modelChoice':'Model (.zip) from File', 'normalizeInput':'true', 'percentileBottom':'1.0', 'percentileTop':'100.0', 'probThresh':'0.05', 'nmsThresh':'0.0', 'outputType':'ROI Manager', 'modelFile':'E:////PROJECTS////LSM_Data////Macros////Model_DAPI_20210125_3_4_images_400_Epochs.zip', 'modelUrl':'', 'nTiles':'1', 'excludeBoundary':'2', 'roiPosition':'Automatic', 'verbose':'false', 'showCsbdeepProgress':'false', 'showProbAndDist':'false'], process=[false]");  
//Deletes ROIs with less area than 25 um2
roiCount =roiManager("count");
areaRois3 = newArray(0);
for (i = 0; i < roiCount; i++) {
roiManager("select", i);
area = getValue("Area");
if(area <= 5){
areaRois3 = append(areaRois3,i);
}}
if(areaRois3.length > 0){
roiManager("select",areaRois3);
roiManager("delete");
}
function append(arr, value) {
     arr2 = newArray(arr.length+1);
     for (i=0; i<arr.length; i++)
        arr2[i] = arr[i];
     arr2[arr.length] = value;
     return arr2;
 }

//Dilate Cell ROIs
n = roiManager("count");
for (i = 0; i < n; i++) {
    roiManager("select", i);
    run("Enlarge...", "enlarge=0.75");
    roiManager("update")
    roiManager("select", i);
}


//Particle Analysis: 

//Select thresholded and binarized smFISH1 
selectWindow("smFISH1_binary");

	//Counting transcripts inside all cells in smFISH1
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
			roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH1_transcripts_per_cell");
	Table.rename("smFISH1_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH1_transcripts_per_cell"+name3+"]");
	close("Results");
	
//Select thresholded and binarized smFISH2
selectWindow("smFISH2_binary");

	//Counting dots inside each roi in smFISH2
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH2_transcripts_per_cell");
	Table.rename("smFISH2_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH2_transcripts_per_cell"+name3+"]");
    close("Results");


if(nsmFISH == 0){
//Select thresholded and binarized smFISH3
selectWindow("smFISH3_binary");

	//Counting dots inside each roi in smFISH3
	numberOfNuclei = roiManager("count");
	for(i=0; i<numberOfNuclei; i++){
		roiManager("Select", i);
			run("Set Measurements...", "area display redirect=None decimal=3");
			run("Analyze Particles...", "size=0-Infinity display include summarize");
			
	}
	IJ.renameResults("smFISH3_transcripts_per_cell");
	Table.rename("smFISH3_transcripts_per_cell", "Results");
	run("Read and Write Excel", "no_count_column file=["+outputDir+"] sheet=[transcripts_per_cell] dataset_label=[smFISH3_transcripts_per_cell"+name3+"]");
    close("Results");
} 
} 
}
  
//close all images and tables
run("Close All");
  }
